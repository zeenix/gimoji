name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
    paths:
      - 'emojis.json'
      - '.github/workflows/deploy-pages.yml'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create website files
        run: |
          mkdir -p website
          cp emojis.json website/

          # Create index.html
          cat > website/index.html << 'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gimoji - Git Commit Emojis</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="terminal">
        <div class="terminal-window">
            <div class="search-box">
                <div class="box-title">┌─ Search an emoji ─┐</div>
                <div class="search-input-wrapper">
                    <input type="text" id="search" placeholder="Use arrow keys or type to search" autocomplete="off">
                </div>
            </div>

            <div class="emoji-table">
                <div class="box-title">┌─ Select an emoji ─┐</div>
                <div class="table-container">
                    <table id="emoji-list">
                        <tbody></tbody>
                    </table>
                </div>
            </div>

            <div class="help-text">
                <span class="key-hint">↑↓</span> Navigate <span class="key-hint">Enter</span> Select <span class="key-hint">Esc</span> Clear/Exit <span class="key-hint">Click</span> Copy code
            </div>
        </div>

        <div id="toast" class="toast">Copied to clipboard!</div>
    </div>

    <script>
        let emojis = [];
        let selectedIndex = 0;
        let filteredEmojis = [];

        async function loadEmojis() {
            try {
                const response = await fetch('emojis.json');
                const data = await response.json();
                emojis = data.gitmojis;
                filteredEmojis = emojis;
                renderEmojis();
            } catch (error) {
                console.error('Failed to load emojis:', error);
            }
        }

        function renderEmojis() {
            const tbody = document.querySelector('#emoji-list tbody');
            tbody.innerHTML = '';

            filteredEmojis.forEach((emoji, index) => {
                const row = document.createElement('tr');
                row.className = index === selectedIndex ? 'selected' : '';
                row.onclick = () => copyToClipboard(emoji.code);

                const indicator = document.createElement('td');
                indicator.className = 'indicator';
                indicator.textContent = index === selectedIndex ? '❯' : '';

                const emojiCell = document.createElement('td');
                emojiCell.className = 'emoji-cell';
                emojiCell.textContent = emoji.emoji;

                const codeCell = document.createElement('td');
                codeCell.className = 'code-cell';
                codeCell.textContent = emoji.code;

                const descCell = document.createElement('td');
                descCell.className = 'desc-cell';
                descCell.textContent = emoji.description;

                row.appendChild(indicator);
                row.appendChild(emojiCell);
                row.appendChild(codeCell);
                row.appendChild(descCell);

                tbody.appendChild(row);
            });

            // Scroll selected item into view
            const selectedRow = tbody.children[selectedIndex];
            if (selectedRow) {
                selectedRow.scrollIntoView({ block: 'nearest' });
            }
        }

        function filterEmojis(searchTerm) {
            const term = searchTerm.toLowerCase();
            filteredEmojis = searchTerm
                ? emojis.filter(emoji =>
                    emoji.name.toLowerCase().includes(term) ||
                    emoji.code.toLowerCase().includes(term) ||
                    emoji.description.toLowerCase().includes(term)
                )
                : emojis;

            selectedIndex = filteredEmojis.length > 0 ? 0 : -1;
            renderEmojis();
        }

        async function copyToClipboard(text) {
            try {
                await navigator.clipboard.writeText(text);
                showToast();
            } catch (err) {
                // Fallback for older browsers
                const textArea = document.createElement('textarea');
                textArea.value = text;
                textArea.style.position = 'fixed';
                textArea.style.left = '-999999px';
                document.body.appendChild(textArea);
                textArea.focus();
                textArea.select();
                try {
                    document.execCommand('copy');
                    showToast();
                } catch (err) {
                    console.error('Failed to copy:', err);
                }
                document.body.removeChild(textArea);
            }
        }

        function showToast() {
            const toast = document.getElementById('toast');
            toast.classList.add('show');
            setTimeout(() => {
                toast.classList.remove('show');
            }, 2000);
        }

        // Keyboard navigation
        document.addEventListener('keydown', (e) => {
            if (filteredEmojis.length === 0) return;

            switch(e.key) {
                case 'ArrowUp':
                    e.preventDefault();
                    selectedIndex = selectedIndex > 0 ? selectedIndex - 1 : filteredEmojis.length - 1;
                    renderEmojis();
                    break;
                case 'ArrowDown':
                    e.preventDefault();
                    selectedIndex = selectedIndex < filteredEmojis.length - 1 ? selectedIndex + 1 : 0;
                    renderEmojis();
                    break;
                case 'Enter':
                    e.preventDefault();
                    if (filteredEmojis[selectedIndex]) {
                        copyToClipboard(filteredEmojis[selectedIndex].code);
                    }
                    break;
                case 'Escape':
                    const searchInput = document.getElementById('search');
                    if (searchInput.value) {
                        searchInput.value = '';
                        filterEmojis('');
                    }
                    break;
            }
        });

        // Search functionality
        document.getElementById('search').addEventListener('input', (e) => {
            filterEmojis(e.target.value);
        });

        // Focus search input on load
        document.getElementById('search').focus();

        // Load emojis on page load
        loadEmojis();
    </script>
</body>
</html>
          EOF

          # Create styles.css
          cat > website/styles.css << 'EOF'
:root {
    --term-bg: #000000;
    --term-fg: #ffffff;
    --term-border: #808080;
    --term-selected-bg: #ffffff;
    --term-selected-fg: #000000;
    --term-dim: #666666;
    --term-bright: #ffffff;
}

@media (prefers-color-scheme: light) {
    :root {
        --term-bg: #ffffff;
        --term-fg: #000000;
        --term-border: #666666;
        --term-selected-bg: #000000;
        --term-selected-fg: #ffffff;
        --term-dim: #999999;
        --term-bright: #000000;
    }
}

* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

body {
    font-family: 'Courier New', 'Consolas', 'Monaco', monospace;
    background-color: var(--term-bg);
    color: var(--term-fg);
    line-height: 1.4;
    overflow: hidden;
}

.terminal {
    width: 100vw;
    height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: var(--term-bg);
}

.terminal-window {
    width: 100%;
    max-width: 1200px;
    height: 100%;
    max-height: 90vh;
    display: flex;
    flex-direction: column;
    padding: 1rem;
}

.search-box, .emoji-table {
    margin-bottom: 0.5rem;
}

.box-title {
    color: var(--term-border);
    font-size: 1rem;
    line-height: 1.2;
    margin-bottom: 0.25rem;
}

.search-input-wrapper {
    border: 1px solid var(--term-border);
    padding: 0.25rem;
    background-color: var(--term-bg);
}

#search {
    width: 100%;
    background: none;
    border: none;
    color: var(--term-fg);
    font-family: inherit;
    font-size: 1rem;
    padding: 0;
    outline: none;
}

#search::placeholder {
    color: var(--term-dim);
}

.emoji-table {
    flex: 1;
    display: flex;
    flex-direction: column;
    overflow: hidden;
}

.table-container {
    flex: 1;
    overflow-y: auto;
    overflow-x: hidden;
    border: 1px solid var(--term-border);
    padding: 0.25rem;
}

#emoji-list {
    width: 100%;
    border-collapse: collapse;
}

#emoji-list tr {
    cursor: pointer;
    transition: none;
}

#emoji-list tr:hover {
    background-color: var(--term-selected-bg);
    color: var(--term-selected-fg);
}

#emoji-list tr.selected {
    background-color: var(--term-selected-bg);
    color: var(--term-selected-fg);
    font-weight: bold;
}

#emoji-list tr.selected .code-cell {
    color: var(--term-selected-fg);
}

#emoji-list td {
    padding: 0 0.5rem;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.indicator {
    width: 2ch;
    text-align: right;
    padding-right: 0.5rem !important;
}

.emoji-cell {
    width: 3ch;
    text-align: center;
    font-size: 1.2rem;
}

.code-cell {
    width: 20ch;
    color: var(--term-bright);
}

.desc-cell {
    width: auto;
    max-width: 0;
    overflow: hidden;
    text-overflow: ellipsis;
}

.help-text {
    margin-top: 0.5rem;
    text-align: center;
    color: var(--term-dim);
    font-size: 0.9rem;
}

.key-hint {
    background-color: var(--term-dim);
    color: var(--term-bg);
    padding: 0.1rem 0.4rem;
    border-radius: 3px;
    margin: 0 0.2rem;
}

.toast {
    position: fixed;
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%) translateY(100px);
    background-color: var(--term-selected-bg);
    color: var(--term-selected-fg);
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--term-border);
    font-weight: 500;
    opacity: 0;
    transition: all 0.3s ease;
    z-index: 1000;
}

.toast.show {
    transform: translateX(-50%) translateY(0);
    opacity: 1;
}

/* Scrollbar styling */
.table-container::-webkit-scrollbar {
    width: 8px;
}

.table-container::-webkit-scrollbar-track {
    background: var(--term-bg);
}

.table-container::-webkit-scrollbar-thumb {
    background: var(--term-dim);
    border-radius: 4px;
}

.table-container::-webkit-scrollbar-thumb:hover {
    background: var(--term-border);
}

/* Firefox scrollbar */
.table-container {
    scrollbar-width: thin;
    scrollbar-color: var(--term-dim) var(--term-bg);
}

/* Mobile adjustments */
@media (max-width: 768px) {
    .terminal-window {
        padding: 0.5rem;
        max-height: 100vh;
    }

    .box-header, .box-footer {
        font-size: 0.8rem;
    }

    #search, #emoji-list {
        font-size: 0.9rem;
    }

    .help-text {
        font-size: 0.8rem;
    }

    .key-hint {
        padding: 0.1rem 0.3rem;
        font-size: 0.8rem;
    }
}
          EOF

      - name: Deploy to gh-pages branch
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./website
          publish_branch: gh-pages
          force_orphan: true
          commit_message: 'Deploy website'
